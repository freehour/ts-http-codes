import { expect, test } from 'bun:test';

import { findHttpStatusCategory, findHttpStatusMessage, HttpStatusCategory, httpStatusCategory, HttpStatusCode, HttpStatusMessage, httpStatusMessage, isHttpStatusCode } from '../lib';


test('HttpStatusCode', () => {
    expect(HttpStatusCode.Continue_100).toBe(100);
    expect(HttpStatusCode.SwitchingProtocols_101).toBe(101);
    expect(HttpStatusCode.Processing_102).toBe(102);
    expect(HttpStatusCode.EarlyHints_103).toBe(103);
    expect(HttpStatusCode.Ok_200).toBe(200);
    expect(HttpStatusCode.Created_201).toBe(201);
    expect(HttpStatusCode.Accepted_202).toBe(202);
    expect(HttpStatusCode.NonAuthoritativeInformation_203).toBe(203);
    expect(HttpStatusCode.NoContent_204).toBe(204);
    expect(HttpStatusCode.ResetContent_205).toBe(205);
    expect(HttpStatusCode.PartialContent_206).toBe(206);
    expect(HttpStatusCode.MultiStatus_207).toBe(207);
    expect(HttpStatusCode.AlreadyReported_208).toBe(208);
    expect(HttpStatusCode.IMUsed_226).toBe(226);
    expect(HttpStatusCode.MultipleChoices_300).toBe(300);
    expect(HttpStatusCode.MovedPermanently_301).toBe(301);
    expect(HttpStatusCode.Found_302).toBe(302);
    expect(HttpStatusCode.SeeOther_303).toBe(303);
    expect(HttpStatusCode.NotModified_304).toBe(304);
    expect(HttpStatusCode.UseProxy_305).toBe(305);
    expect(HttpStatusCode.TemporaryRedirect_307).toBe(307);
    expect(HttpStatusCode.PermanentRedirect_308).toBe(308);
    expect(HttpStatusCode.BadRequest_400).toBe(400);
    expect(HttpStatusCode.Unauthorized_401).toBe(401);
    expect(HttpStatusCode.PaymentRequired_402).toBe(402);
    expect(HttpStatusCode.Forbidden_403).toBe(403);
    expect(HttpStatusCode.NotFound_404).toBe(404);
    expect(HttpStatusCode.MethodNotAllowed_405).toBe(405);
    expect(HttpStatusCode.NotAcceptable_406).toBe(406);
    expect(HttpStatusCode.ProxyAuthenticationRequired_407).toBe(407);
    expect(HttpStatusCode.RequestTimeout_408).toBe(408);
    expect(HttpStatusCode.Conflict_409).toBe(409);
    expect(HttpStatusCode.Gone_410).toBe(410);
    expect(HttpStatusCode.LengthRequired_411).toBe(411);
    expect(HttpStatusCode.PreconditionFailed_412).toBe(412);
    expect(HttpStatusCode.PayloadTooLarge_413).toBe(413);
    expect(HttpStatusCode.URITooLong_414).toBe(414);
    expect(HttpStatusCode.UnsupportedMediaType_415).toBe(415);
    expect(HttpStatusCode.RangeNotSatisfiable_416).toBe(416);
    expect(HttpStatusCode.ExpectationFailed_417).toBe(417);
    expect(HttpStatusCode.ImATeapot_418).toBe(418);
    expect(HttpStatusCode.MisdirectedRequest_421).toBe(421);
    expect(HttpStatusCode.UnprocessableEntity_422).toBe(422);
    expect(HttpStatusCode.Locked_423).toBe(423);
    expect(HttpStatusCode.FailedDependency_424).toBe(424);
    expect(HttpStatusCode.TooEarly_425).toBe(425);
    expect(HttpStatusCode.UpgradeRequired_426).toBe(426);
    expect(HttpStatusCode.PreconditionRequired_428).toBe(428);
    expect(HttpStatusCode.TooManyRequests_429).toBe(429);
    expect(HttpStatusCode.RequestHeaderFieldsTooLarge_431).toBe(431);
    expect(HttpStatusCode.UnavailableForLegalReasons_451).toBe(451);
    expect(HttpStatusCode.InternalServerError_500).toBe(500);
    expect(HttpStatusCode.NotImplemented_501).toBe(501);
    expect(HttpStatusCode.BadGateway_502).toBe(502);
    expect(HttpStatusCode.ServiceUnavailable_503).toBe(503);
    expect(HttpStatusCode.GatewayTimeout_504).toBe(504);
    expect(HttpStatusCode.HTTPVersionNotSupported_505).toBe(505);
    expect(HttpStatusCode.VariantAlsoNegotiates_506).toBe(506);
    expect(HttpStatusCode.InsufficientStorage_507).toBe(507);
    expect(HttpStatusCode.LoopDetected_508).toBe(508);
    expect(HttpStatusCode.BandwidthLimitExceeded_509).toBe(509);
    expect(HttpStatusCode.NotExtended_510).toBe(510);
    expect(HttpStatusCode.NetworkAuthenticationRequired_511).toBe(511);

    expect(isHttpStatusCode(100)).toBe(true);
    expect(isHttpStatusCode(101)).toBe(true);
    expect(isHttpStatusCode(102)).toBe(true);
    expect(isHttpStatusCode(103)).toBe(true);
    expect(isHttpStatusCode(200)).toBe(true);
    expect(isHttpStatusCode(201)).toBe(true);
    expect(isHttpStatusCode(202)).toBe(true);
    expect(isHttpStatusCode(203)).toBe(true);
    expect(isHttpStatusCode(204)).toBe(true);
    expect(isHttpStatusCode(205)).toBe(true);
    expect(isHttpStatusCode(206)).toBe(true);
    expect(isHttpStatusCode(207)).toBe(true);
    expect(isHttpStatusCode(208)).toBe(true);
    expect(isHttpStatusCode(226)).toBe(true);
    expect(isHttpStatusCode(300)).toBe(true);
    expect(isHttpStatusCode(301)).toBe(true);
    expect(isHttpStatusCode(302)).toBe(true);
    expect(isHttpStatusCode(303)).toBe(true);
    expect(isHttpStatusCode(304)).toBe(true);
    expect(isHttpStatusCode(305)).toBe(true);
    expect(isHttpStatusCode(307)).toBe(true);
    expect(isHttpStatusCode(308)).toBe(true);
    expect(isHttpStatusCode(400)).toBe(true);
    expect(isHttpStatusCode(401)).toBe(true);
    expect(isHttpStatusCode(402)).toBe(true);
    expect(isHttpStatusCode(403)).toBe(true);
    expect(isHttpStatusCode(404)).toBe(true);
    expect(isHttpStatusCode(405)).toBe(true);
    expect(isHttpStatusCode(406)).toBe(true);
    expect(isHttpStatusCode(407)).toBe(true);
    expect(isHttpStatusCode(408)).toBe(true);
    expect(isHttpStatusCode(409)).toBe(true);
    expect(isHttpStatusCode(410)).toBe(true);
    expect(isHttpStatusCode(411)).toBe(true);
    expect(isHttpStatusCode(412)).toBe(true);
    expect(isHttpStatusCode(413)).toBe(true);
    expect(isHttpStatusCode(414)).toBe(true);
    expect(isHttpStatusCode(415)).toBe(true);
    expect(isHttpStatusCode(416)).toBe(true);
    expect(isHttpStatusCode(417)).toBe(true);
    expect(isHttpStatusCode(418)).toBe(true);
    expect(isHttpStatusCode(421)).toBe(true);
    expect(isHttpStatusCode(422)).toBe(true);
    expect(isHttpStatusCode(423)).toBe(true);
    expect(isHttpStatusCode(424)).toBe(true);
    expect(isHttpStatusCode(425)).toBe(true);
    expect(isHttpStatusCode(426)).toBe(true);
    expect(isHttpStatusCode(428)).toBe(true);
    expect(isHttpStatusCode(429)).toBe(true);
    expect(isHttpStatusCode(431)).toBe(true);
    expect(isHttpStatusCode(451)).toBe(true);
    expect(isHttpStatusCode(500)).toBe(true);
    expect(isHttpStatusCode(501)).toBe(true);
    expect(isHttpStatusCode(502)).toBe(true);
    expect(isHttpStatusCode(503)).toBe(true);
    expect(isHttpStatusCode(504)).toBe(true);
    expect(isHttpStatusCode(505)).toBe(true);
    expect(isHttpStatusCode(506)).toBe(true);
    expect(isHttpStatusCode(507)).toBe(true);
    expect(isHttpStatusCode(508)).toBe(true);
    expect(isHttpStatusCode(509)).toBe(true);
    expect(isHttpStatusCode(510)).toBe(true);
    expect(isHttpStatusCode(511)).toBe(true);

    expect(isHttpStatusCode(99)).toBe(false);
    expect(isHttpStatusCode(199)).toBe(false);
    expect(isHttpStatusCode(299)).toBe(false);
    expect(isHttpStatusCode(399)).toBe(false);
    expect(isHttpStatusCode(499)).toBe(false);
    expect(isHttpStatusCode(599)).toBe(false);
    expect(isHttpStatusCode(699)).toBe(false);
});

test('HttpStatusMessage', () => {
    expect(HttpStatusMessage.Continue_100 as string).toBe('Continue');
    expect(HttpStatusMessage.SwitchingProtocols_101 as string).toBe('Switching Protocols');
    expect(HttpStatusMessage.Processing_102 as string).toBe('Processing');
    expect(HttpStatusMessage.EarlyHints_103 as string).toBe('Early Hints');
    expect(HttpStatusMessage.Ok_200 as string).toBe('OK');
    expect(HttpStatusMessage.Created_201 as string).toBe('Created');
    expect(HttpStatusMessage.Accepted_202 as string).toBe('Accepted');
    expect(HttpStatusMessage.NonAuthoritativeInformation_203 as string).toBe('Non-Authoritative Information');
    expect(HttpStatusMessage.NoContent_204 as string).toBe('No Content');
    expect(HttpStatusMessage.ResetContent_205 as string).toBe('Reset Content');
    expect(HttpStatusMessage.PartialContent_206 as string).toBe('Partial Content');
    expect(HttpStatusMessage.MultiStatus_207 as string).toBe('Multi-Status');
    expect(HttpStatusMessage.AlreadyReported_208 as string).toBe('Already Reported');
    expect(HttpStatusMessage.IMUsed_226 as string).toBe('IM Used');
    expect(HttpStatusMessage.MultipleChoices_300 as string).toBe('Multiple Choices');
    expect(HttpStatusMessage.MovedPermanently_301 as string).toBe('Moved Permanently');
    expect(HttpStatusMessage.Found_302 as string).toBe('Found');
    expect(HttpStatusMessage.SeeOther_303 as string).toBe('See Other');
    expect(HttpStatusMessage.NotModified_304 as string).toBe('Not Modified');
    expect(HttpStatusMessage.UseProxy_305 as string).toBe('Use Proxy');
    expect(HttpStatusMessage.TemporaryRedirect_307 as string).toBe('Temporary Redirect');
    expect(HttpStatusMessage.PermanentRedirect_308 as string).toBe('Permanent Redirect');
    expect(HttpStatusMessage.BadRequest_400 as string).toBe('Bad Request');
    expect(HttpStatusMessage.Unauthorized_401 as string).toBe('Unauthorized');
    expect(HttpStatusMessage.PaymentRequired_402 as string).toBe('Payment Required');
    expect(HttpStatusMessage.Forbidden_403 as string).toBe('Forbidden');
    expect(HttpStatusMessage.NotFound_404 as string).toBe('Not Found');
    expect(HttpStatusMessage.MethodNotAllowed_405 as string).toBe('Method Not Allowed');
    expect(HttpStatusMessage.NotAcceptable_406 as string).toBe('Not Acceptable');
    expect(HttpStatusMessage.ProxyAuthenticationRequired_407 as string).toBe('Proxy Authentication Required');
    expect(HttpStatusMessage.RequestTimeout_408 as string).toBe('Request Timeout');
    expect(HttpStatusMessage.Conflict_409 as string).toBe('Conflict');
    expect(HttpStatusMessage.Gone_410 as string).toBe('Gone');
    expect(HttpStatusMessage.LengthRequired_411 as string).toBe('Length Required');
    expect(HttpStatusMessage.PreconditionFailed_412 as string).toBe('Precondition Failed');
    expect(HttpStatusMessage.PayloadTooLarge_413 as string).toBe('Payload Too Large');
    expect(HttpStatusMessage.URITooLong_414 as string).toBe('URI Too Long');
    expect(HttpStatusMessage.UnsupportedMediaType_415 as string).toBe('Unsupported Media Type');
    expect(HttpStatusMessage.RangeNotSatisfiable_416 as string).toBe('Range Not Satisfiable');
    expect(HttpStatusMessage.ExpectationFailed_417 as string).toBe('Expectation Failed');
    expect(HttpStatusMessage.ImATeapot_418 as string).toBe('I\'m a teapot');
    expect(HttpStatusMessage.MisdirectedRequest_421 as string).toBe('Misdirected Request');
    expect(HttpStatusMessage.UnprocessableEntity_422 as string).toBe('Unprocessable Entity');
    expect(HttpStatusMessage.Locked_423 as string).toBe('Locked');
    expect(HttpStatusMessage.FailedDependency_424 as string).toBe('Failed Dependency');
    expect(HttpStatusMessage.TooEarly_425 as string).toBe('Too Early');
    expect(HttpStatusMessage.UpgradeRequired_426 as string).toBe('Upgrade Required');
    expect(HttpStatusMessage.PreconditionRequired_428 as string).toBe('Precondition Required');
    expect(HttpStatusMessage.TooManyRequests_429 as string).toBe('Too Many Requests');
    expect(HttpStatusMessage.RequestHeaderFieldsTooLarge_431 as string).toBe('Request Header Fields Too Large');
    expect(HttpStatusMessage.UnavailableForLegalReasons_451 as string).toBe('Unavailable For Legal Reasons');
    expect(HttpStatusMessage.InternalServerError_500 as string).toBe('Internal Server Error');
    expect(HttpStatusMessage.NotImplemented_501 as string).toBe('Not Implemented');
    expect(HttpStatusMessage.BadGateway_502 as string).toBe('Bad Gateway');
    expect(HttpStatusMessage.ServiceUnavailable_503 as string).toBe('Service Unavailable');
    expect(HttpStatusMessage.GatewayTimeout_504 as string).toBe('Gateway Timeout');
    expect(HttpStatusMessage.HTTPVersionNotSupported_505 as string).toBe('HTTP Version Not Supported');
    expect(HttpStatusMessage.VariantAlsoNegotiates_506 as string).toBe('Variant Also Negotiates');
    expect(HttpStatusMessage.InsufficientStorage_507 as string).toBe('Insufficient Storage');
    expect(HttpStatusMessage.LoopDetected_508 as string).toBe('Loop Detected');
    expect(HttpStatusMessage.BandwidthLimitExceeded_509 as string).toBe('Bandwidth Limit Exceeded');
    expect(HttpStatusMessage.NotExtended_510 as string).toBe('Not Extended');
    expect(HttpStatusMessage.NetworkAuthenticationRequired_511 as string).toBe('Network Authentication Required');

    expect(httpStatusMessage(HttpStatusCode.Continue_100)).toBe(HttpStatusMessage.Continue_100);
    expect(httpStatusMessage(HttpStatusCode.SwitchingProtocols_101)).toBe(HttpStatusMessage.SwitchingProtocols_101);
    expect(httpStatusMessage(HttpStatusCode.Processing_102)).toBe(HttpStatusMessage.Processing_102);
    expect(httpStatusMessage(HttpStatusCode.EarlyHints_103)).toBe(HttpStatusMessage.EarlyHints_103);
    expect(httpStatusMessage(HttpStatusCode.Ok_200)).toBe(HttpStatusMessage.Ok_200);
    expect(httpStatusMessage(HttpStatusCode.Created_201)).toBe(HttpStatusMessage.Created_201);
    expect(httpStatusMessage(HttpStatusCode.Accepted_202)).toBe(HttpStatusMessage.Accepted_202);
    expect(httpStatusMessage(HttpStatusCode.NonAuthoritativeInformation_203)).toBe(HttpStatusMessage.NonAuthoritativeInformation_203);
    expect(httpStatusMessage(HttpStatusCode.NoContent_204)).toBe(HttpStatusMessage.NoContent_204);
    expect(httpStatusMessage(HttpStatusCode.ResetContent_205)).toBe(HttpStatusMessage.ResetContent_205);
    expect(httpStatusMessage(HttpStatusCode.PartialContent_206)).toBe(HttpStatusMessage.PartialContent_206);
    expect(httpStatusMessage(HttpStatusCode.MultiStatus_207)).toBe(HttpStatusMessage.MultiStatus_207);
    expect(httpStatusMessage(HttpStatusCode.AlreadyReported_208)).toBe(HttpStatusMessage.AlreadyReported_208);
    expect(httpStatusMessage(HttpStatusCode.IMUsed_226)).toBe(HttpStatusMessage.IMUsed_226);
    expect(httpStatusMessage(HttpStatusCode.MultipleChoices_300)).toBe(HttpStatusMessage.MultipleChoices_300);
    expect(httpStatusMessage(HttpStatusCode.MovedPermanently_301)).toBe(HttpStatusMessage.MovedPermanently_301);
    expect(httpStatusMessage(HttpStatusCode.Found_302)).toBe(HttpStatusMessage.Found_302);
    expect(httpStatusMessage(HttpStatusCode.SeeOther_303)).toBe(HttpStatusMessage.SeeOther_303);
    expect(httpStatusMessage(HttpStatusCode.NotModified_304)).toBe(HttpStatusMessage.NotModified_304);
    expect(httpStatusMessage(HttpStatusCode.UseProxy_305)).toBe(HttpStatusMessage.UseProxy_305);
    expect(httpStatusMessage(HttpStatusCode.TemporaryRedirect_307)).toBe(HttpStatusMessage.TemporaryRedirect_307);
    expect(httpStatusMessage(HttpStatusCode.PermanentRedirect_308)).toBe(HttpStatusMessage.PermanentRedirect_308);
    expect(httpStatusMessage(HttpStatusCode.BadRequest_400)).toBe(HttpStatusMessage.BadRequest_400);
    expect(httpStatusMessage(HttpStatusCode.Unauthorized_401)).toBe(HttpStatusMessage.Unauthorized_401);
    expect(httpStatusMessage(HttpStatusCode.PaymentRequired_402)).toBe(HttpStatusMessage.PaymentRequired_402);
    expect(httpStatusMessage(HttpStatusCode.Forbidden_403)).toBe(HttpStatusMessage.Forbidden_403);
    expect(httpStatusMessage(HttpStatusCode.NotFound_404)).toBe(HttpStatusMessage.NotFound_404);
    expect(httpStatusMessage(HttpStatusCode.MethodNotAllowed_405)).toBe(HttpStatusMessage.MethodNotAllowed_405);
    expect(httpStatusMessage(HttpStatusCode.NotAcceptable_406)).toBe(HttpStatusMessage.NotAcceptable_406);
    expect(httpStatusMessage(HttpStatusCode.ProxyAuthenticationRequired_407)).toBe(HttpStatusMessage.ProxyAuthenticationRequired_407);
    expect(httpStatusMessage(HttpStatusCode.RequestTimeout_408)).toBe(HttpStatusMessage.RequestTimeout_408);
    expect(httpStatusMessage(HttpStatusCode.Conflict_409)).toBe(HttpStatusMessage.Conflict_409);
    expect(httpStatusMessage(HttpStatusCode.Gone_410)).toBe(HttpStatusMessage.Gone_410);
    expect(httpStatusMessage(HttpStatusCode.LengthRequired_411)).toBe(HttpStatusMessage.LengthRequired_411);
    expect(httpStatusMessage(HttpStatusCode.PreconditionFailed_412)).toBe(HttpStatusMessage.PreconditionFailed_412);
    expect(httpStatusMessage(HttpStatusCode.PayloadTooLarge_413)).toBe(HttpStatusMessage.PayloadTooLarge_413);
    expect(httpStatusMessage(HttpStatusCode.URITooLong_414)).toBe(HttpStatusMessage.URITooLong_414);
    expect(httpStatusMessage(HttpStatusCode.UnsupportedMediaType_415)).toBe(HttpStatusMessage.UnsupportedMediaType_415);
    expect(httpStatusMessage(HttpStatusCode.RangeNotSatisfiable_416)).toBe(HttpStatusMessage.RangeNotSatisfiable_416);
    expect(httpStatusMessage(HttpStatusCode.ExpectationFailed_417)).toBe(HttpStatusMessage.ExpectationFailed_417);
    expect(httpStatusMessage(HttpStatusCode.ImATeapot_418)).toBe(HttpStatusMessage.ImATeapot_418);
    expect(httpStatusMessage(HttpStatusCode.MisdirectedRequest_421)).toBe(HttpStatusMessage.MisdirectedRequest_421);
    expect(httpStatusMessage(HttpStatusCode.UnprocessableEntity_422)).toBe(HttpStatusMessage.UnprocessableEntity_422);
    expect(httpStatusMessage(HttpStatusCode.Locked_423)).toBe(HttpStatusMessage.Locked_423);
    expect(httpStatusMessage(HttpStatusCode.FailedDependency_424)).toBe(HttpStatusMessage.FailedDependency_424);
    expect(httpStatusMessage(HttpStatusCode.TooEarly_425)).toBe(HttpStatusMessage.TooEarly_425);
    expect(httpStatusMessage(HttpStatusCode.UpgradeRequired_426)).toBe(HttpStatusMessage.UpgradeRequired_426);
    expect(httpStatusMessage(HttpStatusCode.PreconditionRequired_428)).toBe(HttpStatusMessage.PreconditionRequired_428);
    expect(httpStatusMessage(HttpStatusCode.TooManyRequests_429)).toBe(HttpStatusMessage.TooManyRequests_429);
    expect(httpStatusMessage(HttpStatusCode.RequestHeaderFieldsTooLarge_431)).toBe(HttpStatusMessage.RequestHeaderFieldsTooLarge_431);
    expect(httpStatusMessage(HttpStatusCode.UnavailableForLegalReasons_451)).toBe(HttpStatusMessage.UnavailableForLegalReasons_451);
    expect(httpStatusMessage(HttpStatusCode.InternalServerError_500)).toBe(HttpStatusMessage.InternalServerError_500);
    expect(httpStatusMessage(HttpStatusCode.NotImplemented_501)).toBe(HttpStatusMessage.NotImplemented_501);
    expect(httpStatusMessage(HttpStatusCode.BadGateway_502)).toBe(HttpStatusMessage.BadGateway_502);
    expect(httpStatusMessage(HttpStatusCode.ServiceUnavailable_503)).toBe(HttpStatusMessage.ServiceUnavailable_503);
    expect(httpStatusMessage(HttpStatusCode.GatewayTimeout_504)).toBe(HttpStatusMessage.GatewayTimeout_504);
    expect(httpStatusMessage(HttpStatusCode.HTTPVersionNotSupported_505)).toBe(HttpStatusMessage.HTTPVersionNotSupported_505);
    expect(httpStatusMessage(HttpStatusCode.VariantAlsoNegotiates_506)).toBe(HttpStatusMessage.VariantAlsoNegotiates_506);
    expect(httpStatusMessage(HttpStatusCode.InsufficientStorage_507)).toBe(HttpStatusMessage.InsufficientStorage_507);
    expect(httpStatusMessage(HttpStatusCode.LoopDetected_508)).toBe(HttpStatusMessage.LoopDetected_508);
    expect(httpStatusMessage(HttpStatusCode.BandwidthLimitExceeded_509)).toBe(HttpStatusMessage.BandwidthLimitExceeded_509);
    expect(httpStatusMessage(HttpStatusCode.NotExtended_510)).toBe(HttpStatusMessage.NotExtended_510);
    expect(httpStatusMessage(HttpStatusCode.NetworkAuthenticationRequired_511)).toBe(HttpStatusMessage.NetworkAuthenticationRequired_511);

    expect(() => httpStatusMessage(99)).toThrowError('Unknown HTTP status code: 99');
    expect(() => httpStatusMessage(199)).toThrowError('Unknown HTTP status code: 199');
    expect(() => httpStatusMessage(299)).toThrowError('Unknown HTTP status code: 299');
    expect(() => httpStatusMessage(399)).toThrowError('Unknown HTTP status code: 399');
    expect(() => httpStatusMessage(499)).toThrowError('Unknown HTTP status code: 499');
    expect(() => httpStatusMessage(599)).toThrowError('Unknown HTTP status code: 599');
    expect(() => httpStatusMessage(699)).toThrowError('Unknown HTTP status code: 699');


    expect(findHttpStatusMessage(HttpStatusCode.Continue_100)).toBe(HttpStatusMessage.Continue_100);
    expect(findHttpStatusMessage(HttpStatusCode.SwitchingProtocols_101)).toBe(HttpStatusMessage.SwitchingProtocols_101);
    expect(findHttpStatusMessage(HttpStatusCode.Processing_102)).toBe(HttpStatusMessage.Processing_102);
    expect(findHttpStatusMessage(HttpStatusCode.EarlyHints_103)).toBe(HttpStatusMessage.EarlyHints_103);
    expect(findHttpStatusMessage(HttpStatusCode.Ok_200)).toBe(HttpStatusMessage.Ok_200);
    expect(findHttpStatusMessage(HttpStatusCode.Created_201)).toBe(HttpStatusMessage.Created_201);
    expect(findHttpStatusMessage(HttpStatusCode.Accepted_202)).toBe(HttpStatusMessage.Accepted_202);
    expect(findHttpStatusMessage(HttpStatusCode.NonAuthoritativeInformation_203)).toBe(HttpStatusMessage.NonAuthoritativeInformation_203);
    expect(findHttpStatusMessage(HttpStatusCode.NoContent_204)).toBe(HttpStatusMessage.NoContent_204);
    expect(findHttpStatusMessage(HttpStatusCode.ResetContent_205)).toBe(HttpStatusMessage.ResetContent_205);
    expect(findHttpStatusMessage(HttpStatusCode.PartialContent_206)).toBe(HttpStatusMessage.PartialContent_206);
    expect(findHttpStatusMessage(HttpStatusCode.MultiStatus_207)).toBe(HttpStatusMessage.MultiStatus_207);
    expect(findHttpStatusMessage(HttpStatusCode.AlreadyReported_208)).toBe(HttpStatusMessage.AlreadyReported_208);
    expect(findHttpStatusMessage(HttpStatusCode.IMUsed_226)).toBe(HttpStatusMessage.IMUsed_226);
    expect(findHttpStatusMessage(HttpStatusCode.MultipleChoices_300)).toBe(HttpStatusMessage.MultipleChoices_300);
    expect(findHttpStatusMessage(HttpStatusCode.MovedPermanently_301)).toBe(HttpStatusMessage.MovedPermanently_301);
    expect(findHttpStatusMessage(HttpStatusCode.Found_302)).toBe(HttpStatusMessage.Found_302);
    expect(findHttpStatusMessage(HttpStatusCode.SeeOther_303)).toBe(HttpStatusMessage.SeeOther_303);
    expect(findHttpStatusMessage(HttpStatusCode.NotModified_304)).toBe(HttpStatusMessage.NotModified_304);
    expect(findHttpStatusMessage(HttpStatusCode.UseProxy_305)).toBe(HttpStatusMessage.UseProxy_305);
    expect(findHttpStatusMessage(HttpStatusCode.TemporaryRedirect_307)).toBe(HttpStatusMessage.TemporaryRedirect_307);
    expect(findHttpStatusMessage(HttpStatusCode.PermanentRedirect_308)).toBe(HttpStatusMessage.PermanentRedirect_308);
    expect(findHttpStatusMessage(HttpStatusCode.BadRequest_400)).toBe(HttpStatusMessage.BadRequest_400);
    expect(findHttpStatusMessage(HttpStatusCode.Unauthorized_401)).toBe(HttpStatusMessage.Unauthorized_401);
    expect(findHttpStatusMessage(HttpStatusCode.PaymentRequired_402)).toBe(HttpStatusMessage.PaymentRequired_402);
    expect(findHttpStatusMessage(HttpStatusCode.Forbidden_403)).toBe(HttpStatusMessage.Forbidden_403);
    expect(findHttpStatusMessage(HttpStatusCode.NotFound_404)).toBe(HttpStatusMessage.NotFound_404);
    expect(findHttpStatusMessage(HttpStatusCode.MethodNotAllowed_405)).toBe(HttpStatusMessage.MethodNotAllowed_405);
    expect(findHttpStatusMessage(HttpStatusCode.NotAcceptable_406)).toBe(HttpStatusMessage.NotAcceptable_406);
    expect(findHttpStatusMessage(HttpStatusCode.ProxyAuthenticationRequired_407)).toBe(HttpStatusMessage.ProxyAuthenticationRequired_407);
    expect(findHttpStatusMessage(HttpStatusCode.RequestTimeout_408)).toBe(HttpStatusMessage.RequestTimeout_408);
    expect(findHttpStatusMessage(HttpStatusCode.Conflict_409)).toBe(HttpStatusMessage.Conflict_409);
    expect(findHttpStatusMessage(HttpStatusCode.Gone_410)).toBe(HttpStatusMessage.Gone_410);
    expect(findHttpStatusMessage(HttpStatusCode.LengthRequired_411)).toBe(HttpStatusMessage.LengthRequired_411);
    expect(findHttpStatusMessage(HttpStatusCode.PreconditionFailed_412)).toBe(HttpStatusMessage.PreconditionFailed_412);
    expect(findHttpStatusMessage(HttpStatusCode.PayloadTooLarge_413)).toBe(HttpStatusMessage.PayloadTooLarge_413);
    expect(findHttpStatusMessage(HttpStatusCode.URITooLong_414)).toBe(HttpStatusMessage.URITooLong_414);
    expect(findHttpStatusMessage(HttpStatusCode.UnsupportedMediaType_415)).toBe(HttpStatusMessage.UnsupportedMediaType_415);
    expect(findHttpStatusMessage(HttpStatusCode.RangeNotSatisfiable_416)).toBe(HttpStatusMessage.RangeNotSatisfiable_416);
    expect(findHttpStatusMessage(HttpStatusCode.ExpectationFailed_417)).toBe(HttpStatusMessage.ExpectationFailed_417);
    expect(findHttpStatusMessage(HttpStatusCode.ImATeapot_418)).toBe(HttpStatusMessage.ImATeapot_418);
    expect(findHttpStatusMessage(HttpStatusCode.MisdirectedRequest_421)).toBe(HttpStatusMessage.MisdirectedRequest_421);
    expect(findHttpStatusMessage(HttpStatusCode.UnprocessableEntity_422)).toBe(HttpStatusMessage.UnprocessableEntity_422);
    expect(findHttpStatusMessage(HttpStatusCode.Locked_423)).toBe(HttpStatusMessage.Locked_423);
    expect(findHttpStatusMessage(HttpStatusCode.FailedDependency_424)).toBe(HttpStatusMessage.FailedDependency_424);
    expect(findHttpStatusMessage(HttpStatusCode.TooEarly_425)).toBe(HttpStatusMessage.TooEarly_425);
    expect(findHttpStatusMessage(HttpStatusCode.UpgradeRequired_426)).toBe(HttpStatusMessage.UpgradeRequired_426);
    expect(findHttpStatusMessage(HttpStatusCode.PreconditionRequired_428)).toBe(HttpStatusMessage.PreconditionRequired_428);
    expect(findHttpStatusMessage(HttpStatusCode.TooManyRequests_429)).toBe(HttpStatusMessage.TooManyRequests_429);
    expect(findHttpStatusMessage(HttpStatusCode.RequestHeaderFieldsTooLarge_431)).toBe(HttpStatusMessage.RequestHeaderFieldsTooLarge_431);
    expect(findHttpStatusMessage(HttpStatusCode.UnavailableForLegalReasons_451)).toBe(HttpStatusMessage.UnavailableForLegalReasons_451);
    expect(findHttpStatusMessage(HttpStatusCode.InternalServerError_500)).toBe(HttpStatusMessage.InternalServerError_500);
    expect(findHttpStatusMessage(HttpStatusCode.NotImplemented_501)).toBe(HttpStatusMessage.NotImplemented_501);
    expect(findHttpStatusMessage(HttpStatusCode.BadGateway_502)).toBe(HttpStatusMessage.BadGateway_502);
    expect(findHttpStatusMessage(HttpStatusCode.ServiceUnavailable_503)).toBe(HttpStatusMessage.ServiceUnavailable_503);
    expect(findHttpStatusMessage(HttpStatusCode.GatewayTimeout_504)).toBe(HttpStatusMessage.GatewayTimeout_504);
    expect(findHttpStatusMessage(HttpStatusCode.HTTPVersionNotSupported_505)).toBe(HttpStatusMessage.HTTPVersionNotSupported_505);
    expect(findHttpStatusMessage(HttpStatusCode.VariantAlsoNegotiates_506)).toBe(HttpStatusMessage.VariantAlsoNegotiates_506);
    expect(findHttpStatusMessage(HttpStatusCode.InsufficientStorage_507)).toBe(HttpStatusMessage.InsufficientStorage_507);
    expect(findHttpStatusMessage(HttpStatusCode.LoopDetected_508)).toBe(HttpStatusMessage.LoopDetected_508);
    expect(findHttpStatusMessage(HttpStatusCode.BandwidthLimitExceeded_509)).toBe(HttpStatusMessage.BandwidthLimitExceeded_509);
    expect(findHttpStatusMessage(HttpStatusCode.NotExtended_510)).toBe(HttpStatusMessage.NotExtended_510);
    expect(findHttpStatusMessage(HttpStatusCode.NetworkAuthenticationRequired_511)).toBe(HttpStatusMessage.NetworkAuthenticationRequired_511);

    expect(findHttpStatusMessage(99)).toBeUndefined();
    expect(findHttpStatusMessage(199)).toBeUndefined();
    expect(findHttpStatusMessage(299)).toBeUndefined();
    expect(findHttpStatusMessage(399)).toBeUndefined();
    expect(findHttpStatusMessage(499)).toBeUndefined();
    expect(findHttpStatusMessage(599)).toBeUndefined();
    expect(findHttpStatusMessage(699)).toBeUndefined();
});

test('HttpStatusCategory', () => {
    expect(httpStatusCategory(HttpStatusCode.Continue_100)).toBe(HttpStatusCategory.Informational_1xx);
    expect(httpStatusCategory(HttpStatusCode.SwitchingProtocols_101)).toBe(HttpStatusCategory.Informational_1xx);
    expect(httpStatusCategory(HttpStatusCode.Processing_102)).toBe(HttpStatusCategory.Informational_1xx);
    expect(httpStatusCategory(HttpStatusCode.EarlyHints_103)).toBe(HttpStatusCategory.Informational_1xx);
    expect(httpStatusCategory(HttpStatusCode.Ok_200)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.Created_201)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.Accepted_202)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.NonAuthoritativeInformation_203)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.NoContent_204)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.ResetContent_205)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.PartialContent_206)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.MultiStatus_207)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.AlreadyReported_208)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.IMUsed_226)).toBe(HttpStatusCategory.Success_2xx);
    expect(httpStatusCategory(HttpStatusCode.MultipleChoices_300)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.MovedPermanently_301)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.Found_302)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.SeeOther_303)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.NotModified_304)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.UseProxy_305)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.TemporaryRedirect_307)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.PermanentRedirect_308)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(httpStatusCategory(HttpStatusCode.BadRequest_400)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.Unauthorized_401)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.PaymentRequired_402)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.Forbidden_403)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.NotFound_404)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.MethodNotAllowed_405)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.NotAcceptable_406)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.ProxyAuthenticationRequired_407)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.RequestTimeout_408)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.Conflict_409)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.Gone_410)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.LengthRequired_411)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.PreconditionFailed_412)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.PayloadTooLarge_413)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.URITooLong_414)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.UnsupportedMediaType_415)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.RangeNotSatisfiable_416)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.ExpectationFailed_417)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.ImATeapot_418)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.MisdirectedRequest_421)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.UnprocessableEntity_422)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.Locked_423)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.FailedDependency_424)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.TooEarly_425)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.UpgradeRequired_426)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.PreconditionRequired_428)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.TooManyRequests_429)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.RequestHeaderFieldsTooLarge_431)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.UnavailableForLegalReasons_451)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(httpStatusCategory(HttpStatusCode.InternalServerError_500)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.NotImplemented_501)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.BadGateway_502)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.ServiceUnavailable_503)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.GatewayTimeout_504)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.HTTPVersionNotSupported_505)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.VariantAlsoNegotiates_506)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.InsufficientStorage_507)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.LoopDetected_508)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.BandwidthLimitExceeded_509)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.NotExtended_510)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(httpStatusCategory(HttpStatusCode.NetworkAuthenticationRequired_511)).toBe(HttpStatusCategory.ServerError_5xx);

    expect(() => httpStatusCategory(99)).toThrowError('Unknown HTTP status code: 99');
    expect(() => httpStatusCategory(199)).toThrowError('Unknown HTTP status code: 199');
    expect(() => httpStatusCategory(299)).toThrowError('Unknown HTTP status code: 299');
    expect(() => httpStatusCategory(399)).toThrowError('Unknown HTTP status code: 399');
    expect(() => httpStatusCategory(499)).toThrowError('Unknown HTTP status code: 499');
    expect(() => httpStatusCategory(599)).toThrowError('Unknown HTTP status code: 599');
    expect(() => httpStatusCategory(699)).toThrowError('Unknown HTTP status code: 699');

    expect(findHttpStatusCategory(HttpStatusCode.Continue_100)).toBe(HttpStatusCategory.Informational_1xx);
    expect(findHttpStatusCategory(HttpStatusCode.SwitchingProtocols_101)).toBe(HttpStatusCategory.Informational_1xx);
    expect(findHttpStatusCategory(HttpStatusCode.Processing_102)).toBe(HttpStatusCategory.Informational_1xx);
    expect(findHttpStatusCategory(HttpStatusCode.EarlyHints_103)).toBe(HttpStatusCategory.Informational_1xx);
    expect(findHttpStatusCategory(HttpStatusCode.Ok_200)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.Created_201)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.Accepted_202)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.NonAuthoritativeInformation_203)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.NoContent_204)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.ResetContent_205)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.PartialContent_206)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.MultiStatus_207)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.AlreadyReported_208)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.IMUsed_226)).toBe(HttpStatusCategory.Success_2xx);
    expect(findHttpStatusCategory(HttpStatusCode.MultipleChoices_300)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.MovedPermanently_301)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.Found_302)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.SeeOther_303)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.NotModified_304)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.UseProxy_305)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.TemporaryRedirect_307)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.PermanentRedirect_308)).toBe(HttpStatusCategory.Redirection_3xx);
    expect(findHttpStatusCategory(HttpStatusCode.BadRequest_400)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.Unauthorized_401)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.PaymentRequired_402)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.Forbidden_403)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.NotFound_404)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.MethodNotAllowed_405)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.NotAcceptable_406)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.ProxyAuthenticationRequired_407)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.RequestTimeout_408)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.Conflict_409)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.Gone_410)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.LengthRequired_411)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.PreconditionFailed_412)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.PayloadTooLarge_413)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.URITooLong_414)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.UnsupportedMediaType_415)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.RangeNotSatisfiable_416)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.ExpectationFailed_417)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.ImATeapot_418)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.MisdirectedRequest_421)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.UnprocessableEntity_422)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.Locked_423)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.FailedDependency_424)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.TooEarly_425)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.UpgradeRequired_426)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.PreconditionRequired_428)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.TooManyRequests_429)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.RequestHeaderFieldsTooLarge_431)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.UnavailableForLegalReasons_451)).toBe(HttpStatusCategory.ClientError_4xx);
    expect(findHttpStatusCategory(HttpStatusCode.InternalServerError_500)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.NotImplemented_501)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.BadGateway_502)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.ServiceUnavailable_503)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.GatewayTimeout_504)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.HTTPVersionNotSupported_505)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.VariantAlsoNegotiates_506)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.InsufficientStorage_507)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.LoopDetected_508)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.BandwidthLimitExceeded_509)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.NotExtended_510)).toBe(HttpStatusCategory.ServerError_5xx);
    expect(findHttpStatusCategory(HttpStatusCode.NetworkAuthenticationRequired_511)).toBe(HttpStatusCategory.ServerError_5xx);

    expect(findHttpStatusCategory(99)).toBeUndefined();
    expect(findHttpStatusCategory(199)).toBeUndefined();
    expect(findHttpStatusCategory(299)).toBeUndefined();
    expect(findHttpStatusCategory(399)).toBeUndefined();
    expect(findHttpStatusCategory(499)).toBeUndefined();
    expect(findHttpStatusCategory(599)).toBeUndefined();
    expect(findHttpStatusCategory(699)).toBeUndefined();
});
